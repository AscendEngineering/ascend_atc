import subprocess

protoc_source = "messaging/definitions"
protoc_dest = "messaging/libs"
env = Environment() 

#path variables
doms_directory = 'third_party/ascend_doms/'
http_lib = 'third_party/cpp-httplib-0.5.9'
json_lib = 'third_party/json-3.7.3/include'
messaging_directory = doms_directory+'messaging/'
messaging_lib = messaging_directory+'libs/'
messaging_def = messaging_directory+'definitions/'
log_path = 'third_party/spdlog-1.5.0/'

#create proto files
subprocess.check_call(["rm",'-rf', messaging_directory+"libs"])
subprocess.check_call(["mkdir","-p", messaging_directory+"libs"])
subprocess.check_call("protoc -I=" + messaging_def + " --cpp_out=" + messaging_lib + " " + messaging_def+'msgDef.proto', shell=True)

#messaging
messaging_files = Glob(messaging_lib + '*.cc') 
messaging_files.extend(['atc_msg.cpp'])

#DOMS fields
doms_files = Glob(doms_directory + "*.cpp")

#constants
constant_file = doms_directory+"constants.h"

#atc specific
atc_files = ['main.cpp','ascenddb.cpp','ledger.cpp','router.cpp','dat.cpp',
    'worker.cpp','logging.cpp']

    
env=Environment(
    CPPDEFINES=[],
    CCFLAGS=['-g'],
    LIBS=['zmq', 'pqxx' ,'pq','protobuf','spdlog','pthread'],
	LIBPATH=['/opt/vc/lib/',messaging_lib,log_path+'build'],
    CPPPATH=['third_party/cpp-base64','/usr/local/include',
        messaging_lib,doms_directory,http_lib,json_lib, log_path+'include'],
    SCONS_CXX_STANDARD='c++14')

env.Program('atc', [atc_files,messaging_files,doms_files,constant_file])
