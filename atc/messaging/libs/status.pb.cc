// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#include "status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_emergency_msg_status_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_heartbeat_msg_status_2eproto;
namespace ascend {
class heartbeat_msgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<heartbeat_msg> _instance;
} _heartbeat_msg_default_instance_;
class emergency_msgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<emergency_msg> _instance;
} _emergency_msg_default_instance_;
class msgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg> _instance;
  const ::ascend::heartbeat_msg* heartbeat_;
  const ::ascend::emergency_msg* emergency_;
} _msg_default_instance_;
}  // namespace ascend
static void InitDefaultsscc_info_emergency_msg_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::_emergency_msg_default_instance_;
    new (ptr) ::ascend::emergency_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::emergency_msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_emergency_msg_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_emergency_msg_status_2eproto}, {}};

static void InitDefaultsscc_info_heartbeat_msg_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::_heartbeat_msg_default_instance_;
    new (ptr) ::ascend::heartbeat_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::heartbeat_msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_heartbeat_msg_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_heartbeat_msg_status_2eproto}, {}};

static void InitDefaultsscc_info_msg_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::_msg_default_instance_;
    new (ptr) ::ascend::msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msg_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msg_status_2eproto}, {
      &scc_info_heartbeat_msg_status_2eproto.base,
      &scc_info_emergency_msg_status_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_status_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_status_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_status_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_status_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ascend::heartbeat_msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ascend::heartbeat_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::heartbeat_msg, lng_),
  PROTOBUF_FIELD_OFFSET(::ascend::heartbeat_msg, lat_),
  PROTOBUF_FIELD_OFFSET(::ascend::heartbeat_msg, alt_),
  PROTOBUF_FIELD_OFFSET(::ascend::heartbeat_msg, bat_percentage_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ascend::emergency_msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ascend::emergency_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::emergency_msg, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::ascend::msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ascend::msg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ascend::msg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ascend::msgDefaultTypeInternal, heartbeat_),
  offsetof(::ascend::msgDefaultTypeInternal, emergency_),
  PROTOBUF_FIELD_OFFSET(::ascend::msg, type_),
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ascend::heartbeat_msg)},
  { 13, 19, sizeof(::ascend::emergency_msg)},
  { 20, 28, sizeof(::ascend::msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ascend::_heartbeat_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ascend::_emergency_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ascend::_msg_default_instance_),
};

const char descriptor_table_protodef_status_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014status.proto\022\006ascend\"N\n\rheartbeat_msg\022"
  "\013\n\003lng\030\001 \002(\001\022\013\n\003lat\030\002 \002(\001\022\013\n\003alt\030\003 \002(\001\022\026"
  "\n\016bat_percentage\030\004 \002(\005\"\035\n\remergency_msg\022"
  "\014\n\004name\030\001 \002(\t\"e\n\003msg\022*\n\theartbeat\030\001 \001(\0132"
  "\025.ascend.heartbeat_msgH\000\022*\n\temergency\030\002 "
  "\001(\0132\025.ascend.emergency_msgH\000B\006\n\004type"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_status_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_status_2eproto_sccs[3] = {
  &scc_info_emergency_msg_status_2eproto.base,
  &scc_info_heartbeat_msg_status_2eproto.base,
  &scc_info_msg_status_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_status_2eproto_once;
static bool descriptor_table_status_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto = {
  &descriptor_table_status_2eproto_initialized, descriptor_table_protodef_status_2eproto, "status.proto", 236,
  &descriptor_table_status_2eproto_once, descriptor_table_status_2eproto_sccs, descriptor_table_status_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_status_2eproto::offsets,
  file_level_metadata_status_2eproto, 3, file_level_enum_descriptors_status_2eproto, file_level_service_descriptors_status_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_status_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_status_2eproto), true);
namespace ascend {

// ===================================================================

void heartbeat_msg::InitAsDefaultInstance() {
}
class heartbeat_msg::_Internal {
 public:
  using HasBits = decltype(std::declval<heartbeat_msg>()._has_bits_);
  static void set_has_lng(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bat_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

heartbeat_msg::heartbeat_msg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.heartbeat_msg)
}
heartbeat_msg::heartbeat_msg(const heartbeat_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lng_, &from.lng_,
    static_cast<size_t>(reinterpret_cast<char*>(&bat_percentage_) -
    reinterpret_cast<char*>(&lng_)) + sizeof(bat_percentage_));
  // @@protoc_insertion_point(copy_constructor:ascend.heartbeat_msg)
}

void heartbeat_msg::SharedCtor() {
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bat_percentage_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(bat_percentage_));
}

heartbeat_msg::~heartbeat_msg() {
  // @@protoc_insertion_point(destructor:ascend.heartbeat_msg)
  SharedDtor();
}

void heartbeat_msg::SharedDtor() {
}

void heartbeat_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const heartbeat_msg& heartbeat_msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_heartbeat_msg_status_2eproto.base);
  return *internal_default_instance();
}


void heartbeat_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.heartbeat_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&lng_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bat_percentage_) -
        reinterpret_cast<char*>(&lng_)) + sizeof(bat_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* heartbeat_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double lng = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lng(&has_bits);
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double alt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_alt(&has_bits);
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int32 bat_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bat_percentage(&has_bits);
          bat_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* heartbeat_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.heartbeat_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double lng = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lng(), target);
  }

  // required double lat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lat(), target);
  }

  // required double alt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_alt(), target);
  }

  // required int32 bat_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bat_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.heartbeat_msg)
  return target;
}

size_t heartbeat_msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ascend.heartbeat_msg)
  size_t total_size = 0;

  if (_internal_has_lng()) {
    // required double lng = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_lat()) {
    // required double lat = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_alt()) {
    // required double alt = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_bat_percentage()) {
    // required int32 bat_percentage = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bat_percentage());
  }

  return total_size;
}
size_t heartbeat_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.heartbeat_msg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double lng = 1;
    total_size += 1 + 8;

    // required double lat = 2;
    total_size += 1 + 8;

    // required double alt = 3;
    total_size += 1 + 8;

    // required int32 bat_percentage = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bat_percentage());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void heartbeat_msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.heartbeat_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const heartbeat_msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<heartbeat_msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.heartbeat_msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.heartbeat_msg)
    MergeFrom(*source);
  }
}

void heartbeat_msg::MergeFrom(const heartbeat_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.heartbeat_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lng_ = from.lng_;
    }
    if (cached_has_bits & 0x00000002u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000004u) {
      alt_ = from.alt_;
    }
    if (cached_has_bits & 0x00000008u) {
      bat_percentage_ = from.bat_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void heartbeat_msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.heartbeat_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartbeat_msg::CopyFrom(const heartbeat_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.heartbeat_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartbeat_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void heartbeat_msg::InternalSwap(heartbeat_msg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lng_, other->lng_);
  swap(lat_, other->lat_);
  swap(alt_, other->alt_);
  swap(bat_percentage_, other->bat_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata heartbeat_msg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void emergency_msg::InitAsDefaultInstance() {
}
class emergency_msg::_Internal {
 public:
  using HasBits = decltype(std::declval<emergency_msg>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

emergency_msg::emergency_msg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.emergency_msg)
}
emergency_msg::emergency_msg(const emergency_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:ascend.emergency_msg)
}

void emergency_msg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_emergency_msg_status_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

emergency_msg::~emergency_msg() {
  // @@protoc_insertion_point(destructor:ascend.emergency_msg)
  SharedDtor();
}

void emergency_msg::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void emergency_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const emergency_msg& emergency_msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_emergency_msg_status_2eproto.base);
  return *internal_default_instance();
}


void emergency_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.emergency_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* emergency_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ascend.emergency_msg.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* emergency_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.emergency_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ascend.emergency_msg.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.emergency_msg)
  return target;
}

size_t emergency_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.emergency_msg)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void emergency_msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.emergency_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const emergency_msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<emergency_msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.emergency_msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.emergency_msg)
    MergeFrom(*source);
  }
}

void emergency_msg::MergeFrom(const emergency_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.emergency_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void emergency_msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.emergency_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emergency_msg::CopyFrom(const emergency_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.emergency_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emergency_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void emergency_msg::InternalSwap(emergency_msg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata emergency_msg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg::InitAsDefaultInstance() {
  ::ascend::_msg_default_instance_.heartbeat_ = const_cast< ::ascend::heartbeat_msg*>(
      ::ascend::heartbeat_msg::internal_default_instance());
  ::ascend::_msg_default_instance_.emergency_ = const_cast< ::ascend::emergency_msg*>(
      ::ascend::emergency_msg::internal_default_instance());
}
class msg::_Internal {
 public:
  using HasBits = decltype(std::declval<msg>()._has_bits_);
  static const ::ascend::heartbeat_msg& heartbeat(const msg* msg);
  static const ::ascend::emergency_msg& emergency(const msg* msg);
};

const ::ascend::heartbeat_msg&
msg::_Internal::heartbeat(const msg* msg) {
  return *msg->type_.heartbeat_;
}
const ::ascend::emergency_msg&
msg::_Internal::emergency(const msg* msg) {
  return *msg->type_.emergency_;
}
void msg::set_allocated_heartbeat(::ascend::heartbeat_msg* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    type_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:ascend.msg.heartbeat)
}
void msg::set_allocated_emergency(::ascend::emergency_msg* emergency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (emergency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emergency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency, submessage_arena);
    }
    set_has_emergency();
    type_.emergency_ = emergency;
  }
  // @@protoc_insertion_point(field_set_allocated:ascend.msg.emergency)
}
msg::msg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.msg)
}
msg::msg(const msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::ascend::heartbeat_msg::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kEmergency: {
      _internal_mutable_emergency()->::ascend::emergency_msg::MergeFrom(from._internal_emergency());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ascend.msg)
}

void msg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_status_2eproto.base);
  clear_has_type();
}

msg::~msg() {
  // @@protoc_insertion_point(destructor:ascend.msg)
  SharedDtor();
}

void msg::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg& msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_status_2eproto.base);
  return *internal_default_instance();
}


void msg::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ascend.msg)
  switch (type_case()) {
    case kHeartbeat: {
      delete type_.heartbeat_;
      break;
    }
    case kEmergency: {
      delete type_.emergency_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void msg::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ascend.heartbeat_msg heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ascend.emergency_msg emergency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_emergency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kHeartbeat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::heartbeat(this), target, stream);
      break;
    }
    case kEmergency: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::emergency(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.msg)
  return target;
}

size_t msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // optional .ascend.heartbeat_msg heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.heartbeat_);
      break;
    }
    // optional .ascend.emergency_msg emergency = 2;
    case kEmergency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.emergency_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.msg)
  GOOGLE_DCHECK_NE(&from, this);
  const msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.msg)
    MergeFrom(*source);
  }
}

void msg::MergeFrom(const msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::ascend::heartbeat_msg::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kEmergency: {
      _internal_mutable_emergency()->::ascend::emergency_msg::MergeFrom(from._internal_emergency());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg::CopyFrom(const msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg::IsInitialized() const {
  switch (type_case()) {
    case kHeartbeat: {
      if (has_heartbeat()) {
        if (!this->heartbeat().IsInitialized()) return false;
      }
      break;
    }
    case kEmergency: {
      if (has_emergency()) {
        if (!this->emergency().IsInitialized()) return false;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void msg::InternalSwap(msg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ascend
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ascend::heartbeat_msg* Arena::CreateMaybeMessage< ::ascend::heartbeat_msg >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::heartbeat_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::emergency_msg* Arena::CreateMaybeMessage< ::ascend::emergency_msg >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::emergency_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::msg* Arena::CreateMaybeMessage< ::ascend::msg >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
