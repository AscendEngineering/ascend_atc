// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_status_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_status_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_status_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_status_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto;
namespace ascend {
class emergency_msg;
class emergency_msgDefaultTypeInternal;
extern emergency_msgDefaultTypeInternal _emergency_msg_default_instance_;
class heartbeat_msg;
class heartbeat_msgDefaultTypeInternal;
extern heartbeat_msgDefaultTypeInternal _heartbeat_msg_default_instance_;
class msg;
class msgDefaultTypeInternal;
extern msgDefaultTypeInternal _msg_default_instance_;
}  // namespace ascend
PROTOBUF_NAMESPACE_OPEN
template<> ::ascend::emergency_msg* Arena::CreateMaybeMessage<::ascend::emergency_msg>(Arena*);
template<> ::ascend::heartbeat_msg* Arena::CreateMaybeMessage<::ascend::heartbeat_msg>(Arena*);
template<> ::ascend::msg* Arena::CreateMaybeMessage<::ascend::msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ascend {

// ===================================================================

class heartbeat_msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.heartbeat_msg) */ {
 public:
  heartbeat_msg();
  virtual ~heartbeat_msg();

  heartbeat_msg(const heartbeat_msg& from);
  heartbeat_msg(heartbeat_msg&& from) noexcept
    : heartbeat_msg() {
    *this = ::std::move(from);
  }

  inline heartbeat_msg& operator=(const heartbeat_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline heartbeat_msg& operator=(heartbeat_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const heartbeat_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const heartbeat_msg* internal_default_instance() {
    return reinterpret_cast<const heartbeat_msg*>(
               &_heartbeat_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(heartbeat_msg& a, heartbeat_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(heartbeat_msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline heartbeat_msg* New() const final {
    return CreateMaybeMessage<heartbeat_msg>(nullptr);
  }

  heartbeat_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<heartbeat_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const heartbeat_msg& from);
  void MergeFrom(const heartbeat_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(heartbeat_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.heartbeat_msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLngFieldNumber = 1,
    kLatFieldNumber = 2,
    kAltFieldNumber = 3,
    kBatPercentageFieldNumber = 4,
  };
  // required double lng = 1;
  bool has_lng() const;
  private:
  bool _internal_has_lng() const;
  public:
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // required double lat = 2;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // required double alt = 3;
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  double alt() const;
  void set_alt(double value);
  private:
  double _internal_alt() const;
  void _internal_set_alt(double value);
  public:

  // required int32 bat_percentage = 4;
  bool has_bat_percentage() const;
  private:
  bool _internal_has_bat_percentage() const;
  public:
  void clear_bat_percentage();
  ::PROTOBUF_NAMESPACE_ID::int32 bat_percentage() const;
  void set_bat_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bat_percentage() const;
  void _internal_set_bat_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ascend.heartbeat_msg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double lng_;
  double lat_;
  double alt_;
  ::PROTOBUF_NAMESPACE_ID::int32 bat_percentage_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class emergency_msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.emergency_msg) */ {
 public:
  emergency_msg();
  virtual ~emergency_msg();

  emergency_msg(const emergency_msg& from);
  emergency_msg(emergency_msg&& from) noexcept
    : emergency_msg() {
    *this = ::std::move(from);
  }

  inline emergency_msg& operator=(const emergency_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline emergency_msg& operator=(emergency_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const emergency_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const emergency_msg* internal_default_instance() {
    return reinterpret_cast<const emergency_msg*>(
               &_emergency_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(emergency_msg& a, emergency_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(emergency_msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline emergency_msg* New() const final {
    return CreateMaybeMessage<emergency_msg>(nullptr);
  }

  emergency_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<emergency_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const emergency_msg& from);
  void MergeFrom(const emergency_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(emergency_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.emergency_msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ascend.emergency_msg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.msg) */ {
 public:
  msg();
  virtual ~msg();

  msg(const msg& from);
  msg(msg&& from) noexcept
    : msg() {
    *this = ::std::move(from);
  }

  inline msg& operator=(const msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg& operator=(msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg& default_instance();

  enum TypeCase {
    kHeartbeat = 1,
    kEmergency = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg* internal_default_instance() {
    return reinterpret_cast<const msg*>(
               &_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(msg& a, msg& b) {
    a.Swap(&b);
  }
  inline void Swap(msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg* New() const final {
    return CreateMaybeMessage<msg>(nullptr);
  }

  msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg& from);
  void MergeFrom(const msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatFieldNumber = 1,
    kEmergencyFieldNumber = 2,
  };
  // optional .ascend.heartbeat_msg heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::ascend::heartbeat_msg& heartbeat() const;
  ::ascend::heartbeat_msg* release_heartbeat();
  ::ascend::heartbeat_msg* mutable_heartbeat();
  void set_allocated_heartbeat(::ascend::heartbeat_msg* heartbeat);
  private:
  const ::ascend::heartbeat_msg& _internal_heartbeat() const;
  ::ascend::heartbeat_msg* _internal_mutable_heartbeat();
  public:

  // optional .ascend.emergency_msg emergency = 2;
  bool has_emergency() const;
  private:
  bool _internal_has_emergency() const;
  public:
  void clear_emergency();
  const ::ascend::emergency_msg& emergency() const;
  ::ascend::emergency_msg* release_emergency();
  ::ascend::emergency_msg* mutable_emergency();
  void set_allocated_emergency(::ascend::emergency_msg* emergency);
  private:
  const ::ascend::emergency_msg& _internal_emergency() const;
  ::ascend::emergency_msg* _internal_mutable_emergency();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ascend.msg)
 private:
  class _Internal;
  void set_has_heartbeat();
  void set_has_emergency();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union TypeUnion {
    TypeUnion() {}
    ::ascend::heartbeat_msg* heartbeat_;
    ::ascend::emergency_msg* emergency_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_status_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// heartbeat_msg

// required double lng = 1;
inline bool heartbeat_msg::_internal_has_lng() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool heartbeat_msg::has_lng() const {
  return _internal_has_lng();
}
inline void heartbeat_msg::clear_lng() {
  lng_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double heartbeat_msg::_internal_lng() const {
  return lng_;
}
inline double heartbeat_msg::lng() const {
  // @@protoc_insertion_point(field_get:ascend.heartbeat_msg.lng)
  return _internal_lng();
}
inline void heartbeat_msg::_internal_set_lng(double value) {
  _has_bits_[0] |= 0x00000001u;
  lng_ = value;
}
inline void heartbeat_msg::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:ascend.heartbeat_msg.lng)
}

// required double lat = 2;
inline bool heartbeat_msg::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool heartbeat_msg::has_lat() const {
  return _internal_has_lat();
}
inline void heartbeat_msg::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double heartbeat_msg::_internal_lat() const {
  return lat_;
}
inline double heartbeat_msg::lat() const {
  // @@protoc_insertion_point(field_get:ascend.heartbeat_msg.lat)
  return _internal_lat();
}
inline void heartbeat_msg::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000002u;
  lat_ = value;
}
inline void heartbeat_msg::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:ascend.heartbeat_msg.lat)
}

// required double alt = 3;
inline bool heartbeat_msg::_internal_has_alt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool heartbeat_msg::has_alt() const {
  return _internal_has_alt();
}
inline void heartbeat_msg::clear_alt() {
  alt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double heartbeat_msg::_internal_alt() const {
  return alt_;
}
inline double heartbeat_msg::alt() const {
  // @@protoc_insertion_point(field_get:ascend.heartbeat_msg.alt)
  return _internal_alt();
}
inline void heartbeat_msg::_internal_set_alt(double value) {
  _has_bits_[0] |= 0x00000004u;
  alt_ = value;
}
inline void heartbeat_msg::set_alt(double value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:ascend.heartbeat_msg.alt)
}

// required int32 bat_percentage = 4;
inline bool heartbeat_msg::_internal_has_bat_percentage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool heartbeat_msg::has_bat_percentage() const {
  return _internal_has_bat_percentage();
}
inline void heartbeat_msg::clear_bat_percentage() {
  bat_percentage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 heartbeat_msg::_internal_bat_percentage() const {
  return bat_percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 heartbeat_msg::bat_percentage() const {
  // @@protoc_insertion_point(field_get:ascend.heartbeat_msg.bat_percentage)
  return _internal_bat_percentage();
}
inline void heartbeat_msg::_internal_set_bat_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  bat_percentage_ = value;
}
inline void heartbeat_msg::set_bat_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bat_percentage(value);
  // @@protoc_insertion_point(field_set:ascend.heartbeat_msg.bat_percentage)
}

// -------------------------------------------------------------------

// emergency_msg

// required string name = 1;
inline bool emergency_msg::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool emergency_msg::has_name() const {
  return _internal_has_name();
}
inline void emergency_msg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& emergency_msg::name() const {
  // @@protoc_insertion_point(field_get:ascend.emergency_msg.name)
  return _internal_name();
}
inline void emergency_msg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ascend.emergency_msg.name)
}
inline std::string* emergency_msg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ascend.emergency_msg.name)
  return _internal_mutable_name();
}
inline const std::string& emergency_msg::_internal_name() const {
  return name_.GetNoArena();
}
inline void emergency_msg::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void emergency_msg::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.emergency_msg.name)
}
inline void emergency_msg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.emergency_msg.name)
}
inline void emergency_msg::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.emergency_msg.name)
}
inline std::string* emergency_msg::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* emergency_msg::release_name() {
  // @@protoc_insertion_point(field_release:ascend.emergency_msg.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void emergency_msg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ascend.emergency_msg.name)
}

// -------------------------------------------------------------------

// msg

// optional .ascend.heartbeat_msg heartbeat = 1;
inline bool msg::_internal_has_heartbeat() const {
  return type_case() == kHeartbeat;
}
inline bool msg::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void msg::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void msg::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    delete type_.heartbeat_;
    clear_has_type();
  }
}
inline ::ascend::heartbeat_msg* msg::release_heartbeat() {
  // @@protoc_insertion_point(field_release:ascend.msg.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_type();
      ::ascend::heartbeat_msg* temp = type_.heartbeat_;
    type_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ascend::heartbeat_msg& msg::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *type_.heartbeat_
      : *reinterpret_cast< ::ascend::heartbeat_msg*>(&::ascend::_heartbeat_msg_default_instance_);
}
inline const ::ascend::heartbeat_msg& msg::heartbeat() const {
  // @@protoc_insertion_point(field_get:ascend.msg.heartbeat)
  return _internal_heartbeat();
}
inline ::ascend::heartbeat_msg* msg::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_type();
    set_has_heartbeat();
    type_.heartbeat_ = CreateMaybeMessage< ::ascend::heartbeat_msg >(
        GetArenaNoVirtual());
  }
  return type_.heartbeat_;
}
inline ::ascend::heartbeat_msg* msg::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:ascend.msg.heartbeat)
  return _internal_mutable_heartbeat();
}

// optional .ascend.emergency_msg emergency = 2;
inline bool msg::_internal_has_emergency() const {
  return type_case() == kEmergency;
}
inline bool msg::has_emergency() const {
  return _internal_has_emergency();
}
inline void msg::set_has_emergency() {
  _oneof_case_[0] = kEmergency;
}
inline void msg::clear_emergency() {
  if (_internal_has_emergency()) {
    delete type_.emergency_;
    clear_has_type();
  }
}
inline ::ascend::emergency_msg* msg::release_emergency() {
  // @@protoc_insertion_point(field_release:ascend.msg.emergency)
  if (_internal_has_emergency()) {
    clear_has_type();
      ::ascend::emergency_msg* temp = type_.emergency_;
    type_.emergency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ascend::emergency_msg& msg::_internal_emergency() const {
  return _internal_has_emergency()
      ? *type_.emergency_
      : *reinterpret_cast< ::ascend::emergency_msg*>(&::ascend::_emergency_msg_default_instance_);
}
inline const ::ascend::emergency_msg& msg::emergency() const {
  // @@protoc_insertion_point(field_get:ascend.msg.emergency)
  return _internal_emergency();
}
inline ::ascend::emergency_msg* msg::_internal_mutable_emergency() {
  if (!_internal_has_emergency()) {
    clear_type();
    set_has_emergency();
    type_.emergency_ = CreateMaybeMessage< ::ascend::emergency_msg >(
        GetArenaNoVirtual());
  }
  return type_.emergency_;
}
inline ::ascend::emergency_msg* msg::mutable_emergency() {
  // @@protoc_insertion_point(field_mutable:ascend.msg.emergency)
  return _internal_mutable_emergency();
}

inline bool msg::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void msg::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline msg::TypeCase msg::type_case() const {
  return msg::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ascend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_status_2eproto
